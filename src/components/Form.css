:root {
    --input-wrapper-padding-left: 0.5rem;
    --show-password-svg-width: 1.5em;
    --show-password-svg-height: 1.5em;
    --toggle-password-visibility-padding: 0.3em;
}

.form-wrapper form {
    width: 30vw;
    max-width: 460px;
    display: flex;
    flex-direction: column;
    justify-content: center;

    background-color: rgba(255, 255, 255, 0.3);
    box-shadow: 0 0 0.6em 0.6em rgba(250, 250, 250, 0.6);
    
    border-radius: 0.3em;
    padding: 2em;
}

.input-wrapper {
    margin: 0.5em;
    background-color: #15285764;
    border-radius: 0.3em;
    padding: var(--input-wrapper-padding-left);
}

input {
    border-radius: 0.3em;
    background-color: transparent;
    color: #ffffff;
}

.text-type-input {
    position: relative;
    
}

.text-type-input>label {
    position: absolute;
    top: 50%;
    left: var(--input-wrapper-padding-left);
    transform: translate(0%, -50%);
    transition: all 0.3s;
}

.text-type-input>input {
    width: 100%;
    padding: 0.3em 0;
    font-size: 1.2rem;
}

.text-type-input:has(.toggle-password-visibility) > input {
    width: calc(100% - var(--show-password-svg-width));
}

.text-type-input>input:focus + label,
input.focus-input + label {
    top: 0;
    transform: translate(0%, 0%);
    font-size: 0.7rem;
    font-weight: 600;
}

.date-type-input>label {
    display: block;
}

.toggle-password-visibility {
    position: absolute;
    top: 50%;
    right: var(--input-wrapper-padding-left);
    transform: translate(0%, -50%);
    background-color: transparent;
    padding: var(--toggle-password-visibility-padding);
    height: calc(var(--show-password-svg-width) + 2*var(--toggle-password-visibility-padding));
}

.toggle-password-visibility:hover {
    background-color: #4f8587;
    border-radius: 50%;
}

.toggle-password-visibility>svg {
    display: inline-block;
    width: var(--show-password-svg-width);
    height: var(--show-password-svg-height);
}



/* ============= Creating custom radiobutton ============= */

.radio-button-wrapper {
    position: relative;
    display: flex;
    align-items: center;

    margin: 0.2em 0;
}

.radio-button-wrapper>input[type="radio"] {
    /* Don't make "display: none;" to make the radiobutton disappear; otherwise screen-readers will skip it. */
    /* Rather use the below approach; i.e.; "opacity: 0" to make the "radiobutton" disappear; then screen-readers will read it. */
    opacity: 0;
    position: absolute;
    cursor: pointer;
}

.radio-button-wrapper>input[type="radio"] + label {
    cursor: pointer;
    display: flex;
    align-items: center;
}

.radio-button-wrapper>input[type="radio"] + label::before {
    content: "";
    height: 1em;
    width: 1em;

    display: inline-block;
    border: 2px solid #55f97b;
    border-radius: 50%;

    margin-right: 0.5em;
}

.radio-button-wrapper:hover>input[type="radio"] + label::before,
.radio-button-wrapper>input[type="radio"]:focus + label::before {
    border: 3px solid #ffffff;
    background-color: #55f97b;
}

.radio-button-wrapper>input[type="radio"]:checked + label::before {
    border: 3px solid #55f97b;
    background-color: #078a25;
}

/* ============= Creating custom checkbox ============= */

.checkbox-wrapper{
    position: relative;

    display: flex;
    align-items: center;

    margin: 0.2em;
}

.checkbox-wrapper>input[type="checkbox"] {
    /* Don't make "display: none;" to make the checkbox disappear; otherwise screen-readers will skip it. */
    /* Rather use the below approach; i.e.; "opacity: 0" to make the "checkbox" disappear; then screen-readers will read it. */
    opacity: 0;
    position: absolute;
    cursor: pointer;
}

.checkbox-wrapper>input[type="checkbox"] + label {
    display: flex;
}

.checkbox-wrapper>input[type="checkbox"] + label::before {
    content: "";
    border: 2px solid #55f97b;
    border-radius: 0.2em;
    width: 1em;
    height: 1em;
    /* By default these pseudo-elements inherit te "display" property from the parent element */
    /* Means, this pseudo-element will have a "display" of "inline", since <label> has "display: inline;" */
    /* Hence, the above "height" & "width" property will not work. So we need tto set "display" as "inline-block" */
    display: inline-block;
    margin-right: 0.5em;
}

.checkbox-wrapper:hover>input[type="checkbox"] + label {
    cursor: pointer;
}

.checkbox-wrapper:hover>input[type="checkbox"] + label::before {
    background-color: #55f97b;
    cursor: pointer;
}

.checkbox-wrapper>input[type="checkbox"]:checked + label::before {
    content: "\002714";
    color: #ffffff;
    background-color: #078a25;
    display: flex;
    justify-content: center;
    align-items: center;
}

